// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tasktServer.Database;

namespace tasktServer.Database.Migrations
{
    [DbContext(typeof(tasktDbContext))]
    [Migration("20200614195951_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("tasktServer.Shared.DbModels.AssignedPoolWorker", b =>
                {
                    b.Property<Guid>("AssignedPoolWorkerItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkerPoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignedPoolWorkerItemID");

                    b.HasIndex("WorkerPoolID");

                    b.ToTable("AssignedPoolWorker");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedWorker")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<DateTime>("NewTaskDue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublishedScriptID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignmentID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.BotStoreModel", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BotStoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotStoreValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StoreID");

                    b.ToTable("BotStore");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.PublishedScript", b =>
                {
                    b.Property<Guid>("PublishedScriptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScriptData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScriptType")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublishedScriptID");

                    b.ToTable("PublishedScripts");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.Task", b =>
                {
                    b.Property<Guid>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExecutionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskStarted")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalSeconds")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkerType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.UserProfile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSuccessfulLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LoginProfiles");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.Worker", b =>
                {
                    b.Property<Guid>("WorkerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.WorkerPool", b =>
                {
                    b.Property<Guid>("WorkerPoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkerPoolName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerPoolID");

                    b.ToTable("WorkerPools");
                });

            modelBuilder.Entity("tasktServer.Shared.DbModels.AssignedPoolWorker", b =>
                {
                    b.HasOne("tasktServer.Shared.DbModels.WorkerPool", null)
                        .WithMany("PoolWorkers")
                        .HasForeignKey("WorkerPoolID");
                });
#pragma warning restore 612, 618
        }
    }
}
